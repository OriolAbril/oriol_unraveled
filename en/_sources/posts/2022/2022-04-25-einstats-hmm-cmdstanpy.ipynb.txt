{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d35bf96f",
   "metadata": {},
   "source": [
    "# CmdStanPy and ArviZ integration\n",
    "> \"Embrace labeled multi-dimensional arrays for better exploratory analysis of your Bayesian models\"\n",
    "\n",
    "- toc: true \n",
    "- author: Oriol Abril\n",
    "- badges: true\n",
    "- categories: [python, arviz, stan, xarray, xarray-einstats]\n",
    "- tags: [arviz converters, posterior predictive]\n",
    "- image: images/nb/hmm_drive.png\n",
    "- twitter_large_image: true"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ee60fd5",
   "metadata": {},
   "source": [
    "This blog post is an adaptation of the [Tagging Basketball Events with HMM in Stan](https://mc-stan.org/users/documentation/case-studies/bball-hmm.html) case study. It will not cover any new topics or analysis and assumes you have at least skimmed the original case study.\n",
    "\n",
    "So what is this post about? I will use cmdstanpy+ArviZ integration to show the potential of using labeled arrays when doing exploratory analysis of Bayesian models. I will use [xarray](https://xarray.dev/)'s automatic broadcasting and alignment of arrays and the `stats` module of [xarray-einstats](https://einstats.python.arviz.org) for posterior predictive sampling.\n",
    "\n",
    "Each section maps to an example on the original case study: simple HMM example, tagging drive events and defensive assignment. All sections follow the same structure. \n",
    "\n",
    "The beginning is as concise as possible to avoid duplication: the data needed for the model is read, the model is compiled and sampled. If you are interested you'll be able to read the stan code of the model clicking on the \"Show Output\" buttons. We then move to the target of this blog post: conversion of the cmdstanpy fit to ArviZ `InferenceData` and postprocessing with [xarray](https://xarray.dev/) and [xarray-einstats](https://einstats.python.arviz.org)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "80af05ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cmdstanpy\n",
    "import pandas as pd\n",
    "import arviz as az\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import xarray as xr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5d7e6dc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#hide\n",
    "# use text display to keep blog fast and responsive, \n",
    "# do not execute this cell when running the code\n",
    "xr.set_options(display_style=\"text\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "85727251",
   "metadata": {},
   "outputs": [],
   "source": [
    "az.style.use(\"arviz-darkgrid\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82eaddb1",
   "metadata": {},
   "source": [
    "## Simple HMM example\n",
    "Link to [this same section](https://mc-stan.org/users/documentation/case-studies/bball-hmm.html#simple-hmm-example) in the original Stan case study."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b4d9d45f",
   "metadata": {},
   "outputs": [],
   "source": [
    "hmm_data = pd.read_csv(\"data/hmm_example.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9efac0b",
   "metadata": {},
   "source": [
    "Click the button below to see the Stan code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9de044bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "// simple hmm example (1 output; 2 states)\n",
      "data {\n",
      "  int<lower=0> N;\n",
      "  int<lower=0> K;\n",
      "  real y[N];\n",
      "}\n",
      "\n",
      "parameters {\n",
      "  simplex[K] theta[K];\n",
      "  // real mu[K];\n",
      "  positive_ordered[K] mu;\n",
      "}\n",
      "\n",
      "model {\n",
      "  // priors\n",
      "  target+= normal_lpdf(mu[1] | 3, 1);\n",
      "  target+= normal_lpdf(mu[2] | 10, 1);\n",
      "  // forward algorithm\n",
      "  {\n",
      "  real acc[K];\n",
      "  real gamma[N, K];\n",
      "  for (k in 1:K)\n",
      "    gamma[1, k] = normal_lpdf(y[1] | mu[k], 1);\n",
      "  for (t in 2:N) {\n",
      "    for (k in 1:K) {\n",
      "      for (j in 1:K)\n",
      "        acc[j] = gamma[t-1, j] + log(theta[j, k]) + normal_lpdf(y[t] | mu[k], 1);\n",
      "      gamma[t, k] = log_sum_exp(acc);\n",
      "    }\n",
      "  }\n",
      "  target += log_sum_exp(gamma[N]);\n",
      "  }\n",
      "}\n",
      "\n",
      "generated quantities {\n",
      "  int<lower=1,upper=K> z_star[N];\n",
      "  real log_p_z_star;\n",
      "  {\n",
      "    int back_ptr[N, K];\n",
      "    real best_logp[N, K];\n",
      "    for (k in 1:K)\n",
      "      best_logp[1, k] = normal_lpdf(y[1] | mu[k], 1);\n",
      "    for (t in 2:N) {\n",
      "      for (k in 1:K) {\n",
      "        best_logp[t, k] = negative_infinity();\n",
      "        for (j in 1:K) {\n",
      "          real logp;\n",
      "          logp = best_logp[t-1, j] + log(theta[j, k]) + normal_lpdf(y[t] | mu[k], 1);\n",
      "          if (logp > best_logp[t, k]) {\n",
      "            back_ptr[t, k] = j;\n",
      "            best_logp[t, k] = logp;\n",
      "          }\n",
      "        }\n",
      "      }\n",
      "    }\n",
      "    log_p_z_star = max(best_logp[N]);\n",
      "    for (k in 1:K)\n",
      "      if (best_logp[N, k] == log_p_z_star)\n",
      "        z_star[N] = k;\n",
      "    for (t in 1:(N - 1))\n",
      "      z_star[N - t] = back_ptr[N - t + 1, z_star[N - t + 1]];\n",
      "  }\n",
      "}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#collapse-output\n",
    "with open(\"stan_codes/hmm_example.stan\", \"r\") as f:\n",
    "    print(f.read())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "85787bd6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:cmdstanpy:found newer exe file, not recompiling\n"
     ]
    }
   ],
   "source": [
    "model = cmdstanpy.CmdStanModel(stan_file=\"stan_codes/hmm_example.stan\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "395b6b84",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:cmdstanpy:CmdStan start processing\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1d4f91f53cac4714a17b24ccdf3c7b9b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "chain 1 |          | 00:00 Status"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f30cb7650b504cb482e5ccb6b2b518f8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "chain 2 |          | 00:00 Status"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "893b7b786d3d48209a2f7a788f7707ed",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "chain 3 |          | 00:00 Status"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "71348b32f6784a39a011908db3a0d839",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "chain 4 |          | 00:00 Status"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                                                                                                                                                                                                                                                "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:cmdstanpy:CmdStan done processing.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "stan_data = dict(N = len(hmm_data), K = 2, y = hmm_data[\"y\"])\n",
    "hmm_fit = model.sample(data = stan_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e956c5a5",
   "metadata": {},
   "source": [
    "### Conversion to `InferenceData`\n",
    "To convert a CmdStanPy fit to `InferenceData`, only the `CmdStanMCMC` object is needed. However, to make the most out of ArviZ and xarray features, the dimensions of each variable should also be provided.\n",
    "\n",
    "Optionally, you can also give coordinate values to some of the dimensions. The dimensions without coordinate values provided are initialized with integers starting from 0 as their coordinate values.\n",
    "\n",
    "Dimensions are provided as a dictionary whose keys are variable names and whose values are a list with the dimension names.\n",
    "\n",
    "Coordinates are provided as a dictionary whose keys are now dimension names, and whose values are coordinate values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ab89f87b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>Inference data with groups:\n",
       "\t&gt; posterior\n",
       "\t&gt; sample_stats</pre>"
      ],
      "text/plain": [
       "Inference data with groups:\n",
       "\t> posterior\n",
       "\t> sample_stats"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states = [1, 2]\n",
    "idata = az.from_cmdstanpy(\n",
    "    hmm_fit,\n",
    "    dims={\"theta\": [\"origin_state\", \"end_state\"], \"mu\": [\"state\"], \"z_star\": [\"time\"]},\n",
    "    coords={\"state\": states, \"origin_state\": states, \"end_state\": states}\n",
    ")\n",
    "idata"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05723466",
   "metadata": {},
   "source": [
    "We have now created an `InferenceData` object with two groups, the `posterior` (shown below) contains all posterior samples, and the `sample_stats` one contains sampler information like the log probability, which samples are divergent or the treedepth.\n",
    "\n",
    "Each group is an [xarray.Dataset](https://docs.xarray.dev/en/stable/user-guide/data-structures.html#dataset). As you can see, `Dataset`s have dimensions, coordinates, data variables and attributes. When printed (either as text or as html repr) each element has its own section with the relevant information.\n",
    "\n",
    "The dimensions section lists all the dimensions and their lenghts. There we can quickly see that we have 2 states, and have sampled 1000 draws in 4 independent chains...\n",
    "\n",
    "The coordinates section lists information in the following order: coordinate name, dimension name, type of coordinate values and coordinate values. Moreover, in the beginning there can be an `*` which indicates it is an indexing coordinate. With indexing coordinates, you can use `.sel` method on either `InferenceData` or `Dataset` to select a subset of the data using coordinate values.\n",
    "\n",
    "The data variables lists: variables name, dimensions, type and values. Each variable, stored as a `DataArray` object, is independent of the others. They can have any of the dimensions of the `Dataset` and in any order.\n",
    "\n",
    "The attributes section lists `Dataset` level attributes. By default, ArviZ adds some attributes to give an idea of how the data was generated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "7da9caeb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>&lt;xarray.Dataset&gt;\n",
       "Dimensions:       (chain: 4, draw: 1000, origin_state: 2, end_state: 2,\n",
       "                   state: 2, time: 100)\n",
       "Coordinates:\n",
       "  * chain         (chain) int64 0 1 2 3\n",
       "  * draw          (draw) int64 0 1 2 3 4 5 6 7 ... 993 994 995 996 997 998 999\n",
       "  * origin_state  (origin_state) int64 1 2\n",
       "  * end_state     (end_state) int64 1 2\n",
       "  * state         (state) int64 1 2\n",
       "  * time          (time) int64 0 1 2 3 4 5 6 7 8 ... 91 92 93 94 95 96 97 98 99\n",
       "Data variables:\n",
       "    theta         (chain, draw, origin_state, end_state) float64 0.537 ... 0....\n",
       "    mu            (chain, draw, state) float64 3.335 8.763 2.639 ... 3.078 8.938\n",
       "    z_star        (chain, draw, time) float64 1.0 2.0 2.0 2.0 ... 2.0 2.0 2.0\n",
       "    log_p_z_star  (chain, draw) float64 -166.1 -166.9 -166.3 ... -167.1 -166.0\n",
       "Attributes:\n",
       "    created_at:                 2022-04-24T22:54:42.066604\n",
       "    arviz_version:              0.12.0\n",
       "    inference_library:          cmdstanpy\n",
       "    inference_library_version:  1.0.1</pre>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:       (chain: 4, draw: 1000, origin_state: 2, end_state: 2,\n",
       "                   state: 2, time: 100)\n",
       "Coordinates:\n",
       "  * chain         (chain) int64 0 1 2 3\n",
       "  * draw          (draw) int64 0 1 2 3 4 5 6 7 ... 993 994 995 996 997 998 999\n",
       "  * origin_state  (origin_state) int64 1 2\n",
       "  * end_state     (end_state) int64 1 2\n",
       "  * state         (state) int64 1 2\n",
       "  * time          (time) int64 0 1 2 3 4 5 6 7 8 ... 91 92 93 94 95 96 97 98 99\n",
       "Data variables:\n",
       "    theta         (chain, draw, origin_state, end_state) float64 0.537 ... 0....\n",
       "    mu            (chain, draw, state) float64 3.335 8.763 2.639 ... 3.078 8.938\n",
       "    z_star        (chain, draw, time) float64 1.0 2.0 2.0 2.0 ... 2.0 2.0 2.0\n",
       "    log_p_z_star  (chain, draw) float64 -166.1 -166.9 -166.3 ... -167.1 -166.0\n",
       "Attributes:\n",
       "    created_at:                 2022-04-24T22:54:42.066604\n",
       "    arviz_version:              0.12.0\n",
       "    inference_library:          cmdstanpy\n",
       "    inference_library_version:  1.0.1"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idata.posterior"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b90210b",
   "metadata": {},
   "source": [
    "### Diagnostics\n",
    "`arviz.summary` gives an overview of the fit with both summary statistics and diagnostics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "142d961a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>sd</th>\n",
       "      <th>hdi_3%</th>\n",
       "      <th>hdi_97%</th>\n",
       "      <th>mcse_mean</th>\n",
       "      <th>mcse_sd</th>\n",
       "      <th>ess_bulk</th>\n",
       "      <th>ess_tail</th>\n",
       "      <th>r_hat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>theta[1, 1]</th>\n",
       "      <td>0.668</td>\n",
       "      <td>0.100</td>\n",
       "      <td>0.479</td>\n",
       "      <td>0.846</td>\n",
       "      <td>0.002</td>\n",
       "      <td>0.001</td>\n",
       "      <td>3107.0</td>\n",
       "      <td>2035.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>theta[1, 2]</th>\n",
       "      <td>0.332</td>\n",
       "      <td>0.100</td>\n",
       "      <td>0.154</td>\n",
       "      <td>0.521</td>\n",
       "      <td>0.002</td>\n",
       "      <td>0.001</td>\n",
       "      <td>3107.0</td>\n",
       "      <td>2035.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>theta[2, 1]</th>\n",
       "      <td>0.073</td>\n",
       "      <td>0.029</td>\n",
       "      <td>0.024</td>\n",
       "      <td>0.126</td>\n",
       "      <td>0.001</td>\n",
       "      <td>0.000</td>\n",
       "      <td>2718.0</td>\n",
       "      <td>1969.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>theta[2, 2]</th>\n",
       "      <td>0.927</td>\n",
       "      <td>0.029</td>\n",
       "      <td>0.874</td>\n",
       "      <td>0.976</td>\n",
       "      <td>0.001</td>\n",
       "      <td>0.000</td>\n",
       "      <td>2718.0</td>\n",
       "      <td>1969.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mu[1]</th>\n",
       "      <td>3.016</td>\n",
       "      <td>0.221</td>\n",
       "      <td>2.613</td>\n",
       "      <td>3.432</td>\n",
       "      <td>0.005</td>\n",
       "      <td>0.003</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>2147.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mu[2]</th>\n",
       "      <td>8.828</td>\n",
       "      <td>0.111</td>\n",
       "      <td>8.611</td>\n",
       "      <td>9.032</td>\n",
       "      <td>0.002</td>\n",
       "      <td>0.001</td>\n",
       "      <td>4296.0</td>\n",
       "      <td>3005.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              mean     sd  hdi_3%  hdi_97%  mcse_mean  mcse_sd  ess_bulk  \\\n",
       "theta[1, 1]  0.668  0.100   0.479    0.846      0.002    0.001    3107.0   \n",
       "theta[1, 2]  0.332  0.100   0.154    0.521      0.002    0.001    3107.0   \n",
       "theta[2, 1]  0.073  0.029   0.024    0.126      0.001    0.000    2718.0   \n",
       "theta[2, 2]  0.927  0.029   0.874    0.976      0.001    0.000    2718.0   \n",
       "mu[1]        3.016  0.221   2.613    3.432      0.005    0.003    2012.0   \n",
       "mu[2]        8.828  0.111   8.611    9.032      0.002    0.001    4296.0   \n",
       "\n",
       "             ess_tail  r_hat  \n",
       "theta[1, 1]    2035.0    1.0  \n",
       "theta[1, 2]    2035.0    1.0  \n",
       "theta[2, 1]    1969.0    1.0  \n",
       "theta[2, 2]    1969.0    1.0  \n",
       "mu[1]          2147.0    1.0  \n",
       "mu[2]          3005.0    1.0  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "az.summary(idata, var_names=[\"theta\", \"mu\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7988cfc3",
   "metadata": {},
   "source": [
    "We can customize the appearance of the summary with the `labeller` argument. The `arviz.labels` module includes some common labeller classes. The default is showing only variable name and coordinate values. We will now use the `DimCoordLabeller` to show also the dimension name:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e61cc03c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>sd</th>\n",
       "      <th>hdi_3%</th>\n",
       "      <th>hdi_97%</th>\n",
       "      <th>mcse_mean</th>\n",
       "      <th>mcse_sd</th>\n",
       "      <th>ess_bulk</th>\n",
       "      <th>ess_tail</th>\n",
       "      <th>r_hat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>theta[origin_state: 1, end_state: 1]</th>\n",
       "      <td>0.668</td>\n",
       "      <td>0.100</td>\n",
       "      <td>0.479</td>\n",
       "      <td>0.846</td>\n",
       "      <td>0.002</td>\n",
       "      <td>0.001</td>\n",
       "      <td>3107.0</td>\n",
       "      <td>2035.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>theta[origin_state: 1, end_state: 2]</th>\n",
       "      <td>0.332</td>\n",
       "      <td>0.100</td>\n",
       "      <td>0.154</td>\n",
       "      <td>0.521</td>\n",
       "      <td>0.002</td>\n",
       "      <td>0.001</td>\n",
       "      <td>3107.0</td>\n",
       "      <td>2035.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>theta[origin_state: 2, end_state: 1]</th>\n",
       "      <td>0.073</td>\n",
       "      <td>0.029</td>\n",
       "      <td>0.024</td>\n",
       "      <td>0.126</td>\n",
       "      <td>0.001</td>\n",
       "      <td>0.000</td>\n",
       "      <td>2718.0</td>\n",
       "      <td>1969.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>theta[origin_state: 2, end_state: 2]</th>\n",
       "      <td>0.927</td>\n",
       "      <td>0.029</td>\n",
       "      <td>0.874</td>\n",
       "      <td>0.976</td>\n",
       "      <td>0.001</td>\n",
       "      <td>0.000</td>\n",
       "      <td>2718.0</td>\n",
       "      <td>1969.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mu[state: 1]</th>\n",
       "      <td>3.016</td>\n",
       "      <td>0.221</td>\n",
       "      <td>2.613</td>\n",
       "      <td>3.432</td>\n",
       "      <td>0.005</td>\n",
       "      <td>0.003</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>2147.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mu[state: 2]</th>\n",
       "      <td>8.828</td>\n",
       "      <td>0.111</td>\n",
       "      <td>8.611</td>\n",
       "      <td>9.032</td>\n",
       "      <td>0.002</td>\n",
       "      <td>0.001</td>\n",
       "      <td>4296.0</td>\n",
       "      <td>3005.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                       mean     sd  hdi_3%  hdi_97%  \\\n",
       "theta[origin_state: 1, end_state: 1]  0.668  0.100   0.479    0.846   \n",
       "theta[origin_state: 1, end_state: 2]  0.332  0.100   0.154    0.521   \n",
       "theta[origin_state: 2, end_state: 1]  0.073  0.029   0.024    0.126   \n",
       "theta[origin_state: 2, end_state: 2]  0.927  0.029   0.874    0.976   \n",
       "mu[state: 1]                          3.016  0.221   2.613    3.432   \n",
       "mu[state: 2]                          8.828  0.111   8.611    9.032   \n",
       "\n",
       "                                      mcse_mean  mcse_sd  ess_bulk  ess_tail  \\\n",
       "theta[origin_state: 1, end_state: 1]      0.002    0.001    3107.0    2035.0   \n",
       "theta[origin_state: 1, end_state: 2]      0.002    0.001    3107.0    2035.0   \n",
       "theta[origin_state: 2, end_state: 1]      0.001    0.000    2718.0    1969.0   \n",
       "theta[origin_state: 2, end_state: 2]      0.001    0.000    2718.0    1969.0   \n",
       "mu[state: 1]                              0.005    0.003    2012.0    2147.0   \n",
       "mu[state: 2]                              0.002    0.001    4296.0    3005.0   \n",
       "\n",
       "                                      r_hat  \n",
       "theta[origin_state: 1, end_state: 1]    1.0  \n",
       "theta[origin_state: 1, end_state: 2]    1.0  \n",
       "theta[origin_state: 2, end_state: 1]    1.0  \n",
       "theta[origin_state: 2, end_state: 2]    1.0  \n",
       "mu[state: 1]                            1.0  \n",
       "mu[state: 2]                            1.0  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "az.summary(idata, var_names=[\"theta\", \"mu\"], labeller=az.labels.DimCoordLabeller())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1690a0f7",
   "metadata": {},
   "source": [
    "Further guidance on sorting and customizing ArviZ labels can be found in the [ArviZ label guide](https://python.arviz.org/en/latest/user_guide/label_guide.html)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d8407da",
   "metadata": {},
   "source": [
    "### Posterior predictive sampling\n",
    "Following the case study, we will perform posterior predictive sampling in Python instead of in the `generated_quantities` block of Stan. We will use [xarray-einstats](https://einstats.python.arviz.org/en/latest/) to generate the random samples from xarray objects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ecc39349",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>&lt;xarray.Dataset&gt;\n",
       "Dimensions:  (chain: 4, draw: 1000, time: 100)\n",
       "Coordinates:\n",
       "  * chain    (chain) int64 0 1 2 3\n",
       "  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 992 993 994 995 996 997 998 999\n",
       "    state    (chain, draw, time) int64 1 2 2 2 2 2 2 2 2 2 ... 2 2 2 2 2 2 2 2 2\n",
       "  * time     (time) int64 0 1 2 3 4 5 6 7 8 9 ... 90 91 92 93 94 95 96 97 98 99\n",
       "Data variables:\n",
       "    psi_seq  (chain, draw, time) float64 3.335 8.763 8.763 ... 8.938 8.938 8.938</pre>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:  (chain: 4, draw: 1000, time: 100)\n",
       "Coordinates:\n",
       "  * chain    (chain) int64 0 1 2 3\n",
       "  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 992 993 994 995 996 997 998 999\n",
       "    state    (chain, draw, time) int64 1 2 2 2 2 2 2 2 2 2 ... 2 2 2 2 2 2 2 2 2\n",
       "  * time     (time) int64 0 1 2 3 4 5 6 7 8 9 ... 90 91 92 93 94 95 96 97 98 99\n",
       "Data variables:\n",
       "    psi_seq  (chain, draw, time) float64 3.335 8.763 8.763 ... 8.938 8.938 8.938"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from xarray_einstats.stats import XrContinuousRV\n",
    "from scipy.stats import norm\n",
    "\n",
    "post = idata.posterior\n",
    "\n",
    "psi_seq = post[\"mu\"].sel(state=post[\"z_star\"])\n",
    "# the conversion to dataset is for dislpay reasons only\n",
    "psi_seq.to_dataset(name=\"psi_seq\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fc0e872",
   "metadata": {},
   "source": [
    "When we do `.sel(state=DataArray)` we are telling xarray to use the values in the provided `DataArray` as labels with which to index the `state` dimension. xarray takes care of aligning and broadcasting the dimensions for the indexing to work and generates the desired 3d array with chain, draw and time dimensions.\n",
    "\n",
    "With the means that correspond to each posterior predictive sample, we need to generate random draws from a normal with mean `mu` and standard deviation `1`. \n",
    "xarray-einstats provides the [XrContinuousRV](https://einstats.python.arviz.org/en/latest/tutorials/stats_tutorial.html#probability-distributions) class to wrap SciPy distributions and have them take `DataArray`s as inputs. \n",
    "\n",
    "We can then generate the distribution and generate the random samples with the `rvs` method like we would do with SciPy. The `to_dataset` method is called so we can then add the data as a new group to our `InferenceData`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "bd212f89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inference data with groups:\n",
      "\t> posterior\n",
      "\t> posterior_predictive\n",
      "\t> sample_stats\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre>&lt;xarray.Dataset&gt;\n",
       "Dimensions:  (chain: 4, draw: 1000, time: 100)\n",
       "Coordinates:\n",
       "  * chain    (chain) int64 0 1 2 3\n",
       "  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 992 993 994 995 996 997 998 999\n",
       "    state    (chain, draw, time) int64 1 2 2 2 2 2 2 2 2 2 ... 2 2 2 2 2 2 2 2 2\n",
       "  * time     (time) int64 0 1 2 3 4 5 6 7 8 9 ... 90 91 92 93 94 95 96 97 98 99\n",
       "Data variables:\n",
       "    y        (chain, draw, time) float64 3.875 9.168 8.93 ... 8.58 7.509 8.855</pre>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:  (chain: 4, draw: 1000, time: 100)\n",
       "Coordinates:\n",
       "  * chain    (chain) int64 0 1 2 3\n",
       "  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 992 993 994 995 996 997 998 999\n",
       "    state    (chain, draw, time) int64 1 2 2 2 2 2 2 2 2 2 ... 2 2 2 2 2 2 2 2 2\n",
       "  * time     (time) int64 0 1 2 3 4 5 6 7 8 9 ... 90 91 92 93 94 95 96 97 98 99\n",
       "Data variables:\n",
       "    y        (chain, draw, time) float64 3.875 9.168 8.93 ... 8.58 7.509 8.855"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idata.add_groups(posterior_predictive=XrContinuousRV(norm, psi_seq, 1).rvs().to_dataset(name=\"y\"))\n",
    "print(idata)\n",
    "idata.posterior_predictive"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08de532b",
   "metadata": {},
   "source": [
    "Before plotting we will use the [extract_dataset](https://python.arviz.org/en/latest/api/generated/arviz.extract_dataset.html) function to get a random subset of 100 samples. Plotting the 4000 samples we have available would be excessive and not add any information to the plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "47901710",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pp_subset = az.extract_dataset(idata, group=\"posterior_predictive\", num_samples=100)\n",
    "\n",
    "_, ax = plt.subplots()\n",
    "ax.plot(hmm_data[\"y\"], \"k-\", zorder=3, label=\"Observed\")\n",
    "ax.set_title(\"Observed vs Predicted Output\")\n",
    "ax.set_ylabel(\"Observation Value\")\n",
    "ax.set_xlabel(\"Time\")\n",
    "\n",
    "ax.plot(pp_subset[\"y\"], color=\"#ff668890\", alpha=.2)\n",
    "ax.plot([], [], color=\"#ff668890\", label=\"Predicted\")\n",
    "ax.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12093388",
   "metadata": {},
   "source": [
    "## Tagging Drive Events\n",
    "Link to [this same section](https://mc-stan.org/users/documentation/case-studies/bball-hmm.html#tagging-drive-events) in the original Stan case study."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4df54ed4",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"data/evt140_0021500411.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cc181552",
   "metadata": {},
   "outputs": [],
   "source": [
    "stan_data = dict(\n",
    "    N = len(df),\n",
    "    K = 2,\n",
    "    u = np.log(1/df[\"lavine_speed_smooth\"].values),\n",
    "    v = np.log(df[\"lavine_dist\"].values),\n",
    "    alpha = np.array([[4,2],[2,4]]),\n",
    "    tau = 0.1,\n",
    "    rho = 0.1\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d081dea4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "// drive model (normal dist)\n",
      "data {\n",
      "  int<lower=1> K;               // number of states (1 = none, 2 = drive)\n",
      "  int<lower=1> N;               // length of process\n",
      "  real u[N];                    // 1/speed\n",
      "  real v[N];                    // hoop distance\n",
      "  matrix<lower=0>[K,K] alpha;   // transit prior\n",
      "  real<lower=0> tau;            // sd u\n",
      "  real<lower=0> rho;            // sd v\n",
      "}\n",
      "parameters {\n",
      "  simplex[K] theta[K];          // transit probs\n",
      "  // enforce an ordering: phi[1] <= phi[2] \n",
      "  ordered[K] phi;      // emission parameter for 1/speed\n",
      "  ordered[K] lambda;   // emission parameter for hoop dist\n",
      "}\n",
      "model {\n",
      "  // priors\n",
      "  for (k in 1:K)\n",
      "    target += dirichlet_lpdf(theta[k] | alpha[k,]');\n",
      "  target+= normal_lpdf(phi[1] | 0, 1);\n",
      "  target+= normal_lpdf(phi[2] | 3, 1);\n",
      "  target+= normal_lpdf(lambda[1] | 0, 1);\n",
      "  target+= normal_lpdf(lambda[2] | 3, 1);\n",
      "  // forward algorithm\n",
      "  {\n",
      "    real acc[K];\n",
      "    real gamma[N,K];\n",
      "    for (k in 1:K)\n",
      "      gamma[1,k] = normal_lpdf(u[1] | phi[k], tau) + normal_lpdf(v[1] | lambda[k], rho);\n",
      "    for (t in 2:N) {\n",
      "      for (k in 1:K) {\n",
      "        for (j in 1:K)\n",
      "          acc[j] = gamma[t-1,j] + log(theta[j,k]) + normal_lpdf(u[t] | phi[k], tau) + normal_lpdf(v[t] | lambda[k], rho);\n",
      "        gamma[t,k] = log_sum_exp(acc);\n",
      "      }\n",
      "    }\n",
      "    target+= log_sum_exp(gamma[N]);\n",
      "  }\n",
      "}\n",
      "\n",
      "generated quantities {\n",
      "  int<lower=1,upper=K> z_star[N];\n",
      "  real log_p_z_star;\n",
      "  // Viterbi algorithm\n",
      "  {\n",
      "    int back_ptr[N,K];\n",
      "    real best_logp[N,K];\n",
      "    for (k in 1:K)\n",
      "      best_logp[1,K] = normal_lpdf(u[1] | phi[k], tau) + normal_lpdf(v[1] | lambda[k], rho);\n",
      "    for (t in 2:N) {\n",
      "      for (k in 1:K) {\n",
      "        best_logp[t,k] = negative_infinity();\n",
      "        for (j in 1:K) {\n",
      "          real logp;\n",
      "          logp = best_logp[t-1,j] + log(theta[j,k]) + normal_lpdf(u[t] | phi[k], tau) + normal_lpdf(v[t] | lambda[k], rho);\n",
      "          if (logp > best_logp[t,k]) {\n",
      "            back_ptr[t,k] = j;\n",
      "            best_logp[t,k] = logp;\n",
      "          }\n",
      "        }\n",
      "      }\n",
      "    }\n",
      "    log_p_z_star = max(best_logp[N]);\n",
      "    for (k in 1:K)\n",
      "      if (best_logp[N,k] == log_p_z_star)\n",
      "        z_star[N] = k;\n",
      "    for (t in 1:(N - 1))\n",
      "      z_star[N - t] = back_ptr[N - t + 1, z_star[N - t + 1]];\n",
      "  }\n",
      "}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#collapse-output\n",
    "with open(\"stan_codes/drive_1.stan\", \"r\") as f:\n",
    "    print(f.read())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "88c63b52",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:cmdstanpy:found newer exe file, not recompiling\n"
     ]
    }
   ],
   "source": [
    "model = cmdstanpy.CmdStanModel(stan_file=\"stan_codes/drive_1.stan\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1f050af5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:cmdstanpy:CmdStan start processing\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "17fc499b07044d3c88bfebdc99d391f0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "chain 1 |          | 00:00 Status"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bacf683804e84422b40ee427a3385f1d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "chain 2 |          | 00:00 Status"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0289452a1b7f42a8959ead09c88abfae",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "chain 3 |          | 00:00 Status"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "80d94cd8aa6a4b3895d142ac959d5714",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "chain 4 |          | 00:00 Status"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                                                                                                                                                                                                                                                "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:cmdstanpy:CmdStan done processing.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "drive_fit = model.sample(data = stan_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cf6594c",
   "metadata": {},
   "source": [
    "### Conversion to `InferenceData`\n",
    "In this example we also use the `observed_data` argument to add some data to the `observed_data` group. This can be useful to have the observations also as xarray objects and ease postprocessing operations, or to share the model and InferenceData file for collaborators to reproduce the fit or work with the results directly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "fe6e0f1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>&lt;xarray.Dataset&gt;\n",
       "Dimensions:       (chain: 4, draw: 1000, origin_state: 2, end_state: 2,\n",
       "                   state: 2, time: 416)\n",
       "Coordinates:\n",
       "  * chain         (chain) int64 0 1 2 3\n",
       "  * draw          (draw) int64 0 1 2 3 4 5 6 7 ... 993 994 995 996 997 998 999\n",
       "  * origin_state  (origin_state) int64 1 2\n",
       "  * end_state     (end_state) int64 1 2\n",
       "  * state         (state) int64 1 2\n",
       "  * time          (time) int64 0 1 2 3 4 5 6 7 ... 409 410 411 412 413 414 415\n",
       "Data variables:\n",
       "    theta         (chain, draw, origin_state, end_state) float64 0.9664 ... 0...\n",
       "    phi           (chain, draw, state) float64 -2.379 -0.7464 ... -2.332 -0.7441\n",
       "    lambda        (chain, draw, state) float64 2.421 3.542 2.425 ... 2.423 3.534\n",
       "    z_star        (chain, draw, time) float64 2.0 2.0 2.0 2.0 ... 2.0 2.0 2.0\n",
       "    log_p_z_star  (chain, draw) float64 -6.908e+03 -6.904e+03 ... -6.905e+03\n",
       "Attributes:\n",
       "    created_at:                 2022-04-24T23:29:53.782668\n",
       "    arviz_version:              0.12.0\n",
       "    inference_library:          cmdstanpy\n",
       "    inference_library_version:  1.0.1</pre>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:       (chain: 4, draw: 1000, origin_state: 2, end_state: 2,\n",
       "                   state: 2, time: 416)\n",
       "Coordinates:\n",
       "  * chain         (chain) int64 0 1 2 3\n",
       "  * draw          (draw) int64 0 1 2 3 4 5 6 7 ... 993 994 995 996 997 998 999\n",
       "  * origin_state  (origin_state) int64 1 2\n",
       "  * end_state     (end_state) int64 1 2\n",
       "  * state         (state) int64 1 2\n",
       "  * time          (time) int64 0 1 2 3 4 5 6 7 ... 409 410 411 412 413 414 415\n",
       "Data variables:\n",
       "    theta         (chain, draw, origin_state, end_state) float64 0.9664 ... 0...\n",
       "    phi           (chain, draw, state) float64 -2.379 -0.7464 ... -2.332 -0.7441\n",
       "    lambda        (chain, draw, state) float64 2.421 3.542 2.425 ... 2.423 3.534\n",
       "    z_star        (chain, draw, time) float64 2.0 2.0 2.0 2.0 ... 2.0 2.0 2.0\n",
       "    log_p_z_star  (chain, draw) float64 -6.908e+03 -6.904e+03 ... -6.905e+03\n",
       "Attributes:\n",
       "    created_at:                 2022-04-24T23:29:53.782668\n",
       "    arviz_version:              0.12.0\n",
       "    inference_library:          cmdstanpy\n",
       "    inference_library_version:  1.0.1"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states = [1, 2]\n",
    "drive_idata = az.from_cmdstanpy(\n",
    "    drive_fit,\n",
    "    dims={\n",
    "        \"theta\": [\"origin_state\", \"end_state\"], \n",
    "        \"alpha\": [\"origin_state\", \"end_state\"], \n",
    "        \"phi\": [\"state\"], \n",
    "        \"lambda\": [\"state\"], \n",
    "        \"z_star\": [\"time\"],\n",
    "        \"v\": [\"time\"],\n",
    "        \"u\": [\"time\"],\n",
    "    },\n",
    "    observed_data={k: v for k, v in stan_data.items() if k in {\"u\", \"v\", \"alpha\"}},\n",
    "    coords={\"state\": states, \"origin_state\": states, \"end_state\": states}\n",
    ")\n",
    "drive_idata.posterior"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3fbe318",
   "metadata": {},
   "source": [
    "### Posterior predictive sampling\n",
    "We use again the same functions as before, with only a small difference, we now use `.sel` on a `Dataset` with the two variables of interest instead of a `DataArray`. As you can see, everything works the same."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c6dffa0c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>&lt;xarray.Dataset&gt;\n",
       "Dimensions:  (chain: 4, draw: 1000, time: 416)\n",
       "Coordinates:\n",
       "  * chain    (chain) int64 0 1 2 3\n",
       "  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 992 993 994 995 996 997 998 999\n",
       "    state    (chain, draw, time) int64 2 2 2 2 2 2 2 2 2 2 ... 2 2 2 2 2 2 2 2 2\n",
       "  * time     (time) int64 0 1 2 3 4 5 6 7 8 ... 408 409 410 411 412 413 414 415\n",
       "Data variables:\n",
       "    phi      (chain, draw, time) float64 -0.7508 -0.904 ... -0.6576 -0.8262\n",
       "    lambda   (chain, draw, time) float64 3.422 3.491 3.549 ... 3.443 3.603 3.345</pre>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:  (chain: 4, draw: 1000, time: 416)\n",
       "Coordinates:\n",
       "  * chain    (chain) int64 0 1 2 3\n",
       "  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 992 993 994 995 996 997 998 999\n",
       "    state    (chain, draw, time) int64 2 2 2 2 2 2 2 2 2 2 ... 2 2 2 2 2 2 2 2 2\n",
       "  * time     (time) int64 0 1 2 3 4 5 6 7 8 ... 408 409 410 411 412 413 414 415\n",
       "Data variables:\n",
       "    phi      (chain, draw, time) float64 -0.7508 -0.904 ... -0.6576 -0.8262\n",
       "    lambda   (chain, draw, time) float64 3.422 3.491 3.549 ... 3.443 3.603 3.345"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "post = drive_idata.posterior\n",
    "\n",
    "ds_seq = post[[\"phi\", \"lambda\"]].sel(state=post[\"z_star\"])\n",
    "phi_hat = XrContinuousRV(norm, ds_seq[\"phi\"], .1).rvs()\n",
    "lambda_hat = XrContinuousRV(norm, ds_seq[\"lambda\"], .1).rvs()\n",
    "\n",
    "drive_idata.add_groups(\n",
    "    posterior_predictive=xr.Dataset({\"phi\": phi_hat, \"lambda\": lambda_hat})\n",
    ")\n",
    "drive_idata.posterior_predictive"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01935d80",
   "metadata": {},
   "source": [
    "We end reproducing the plot in the original case study to show that the posterior predictive samples do indeed look the same."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "026a3c8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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46233sJoNPL999+j13DPn02aNOHhhx+uUCu6bt06Nm3ahJ+fH6+88orXuQsPD+fll18G4Pfff+f48eMVtitJEq+99ppXWSUkJHjO2dGjR3nttdfw8/PzzG/bti29evVC0zTWrFlzxscSGxvL888/71UTGxcXx8iRI4GK5TRlyhQAbr755gpNMIYNG8YVV1yB0+nk22+/9UxPS0vjjz/+QJIkXn75Za/jCwgI4NVXX8VsNrNx40Y2bNhQaZz33nuv18txiqLwxBNPEBMTQ2pqKvPmzav2MZe903KmzU/mzp1Lamoq0dHRPPPMM141/g0bNuTJJ58EYOrUqdjtds+8snMxatSoCjXBt99+e5XNbk4lOzsbcDexOFlQUFCFUYTP9PqCc7v+TzZp0iQcDgcPP/wwV155pde8hIQEXnvtNQCvz83J8QFs3769WvsTBKHu+Xwzkr59+7J48WKcTme1HokLvk/TNIAKo4VWpnXr1iiKwowZM2jatCn9+/cnOjq6RuI4dOgQy5Yt49ChQxQXF3viKkvwDxw44PkiLO+KK66oNPayL/T09HTPtMzMTHbs2IEsy9V+YW3JkiUADBo0qNL5MTExNG7cmL1793Lw4EGaNm1are1WR79+/Sptl1uW7Pbq1atC0xOANm3akJyczM6dO1mzZo0niS4THx9PYmJihfWaNGniWT8iIqLK+WUDXZ2Jyy67zCt5L1NZOblcLk8yPHTo0Eq3V/Yy2+rVqz3T1q5di6ZptG7dutLeJGJiYujZsyd//vknq1evrrRpQmX7M5lMDB48mK+++oo1a9Zw9dVXn+Zo3co+u2fa9resfK+66qpK3zm48sorCQkJIT8/n61bt9KpUydcLhcbN24EqDK+IUOGsGXLljOKpV27duzdu5fHH3+cu+++m/bt21fZZv9srq8yZ3v9l6dpGkuXLgWoNNEH902jv78/O3bswG63YzabveaXlVXZfgVBOP/4fLL96KOPsnr1ap566imee+65Stt7CheW3NxcgGqVdaNGjXjqqad46623ePnll3n55ZdJSEigffv2XH755QwcOLDKFxKroqoqL7/8Mj/++OMpa4aLiooqnV7VaKZlNe/lu64s62EnKiqKoKCgasVX1g/5Lbfcctplc3JyajTZPvklzTJliWlV7Y7BXVY7d+70SmLLVHXOymoXq5pf1l68fG1qdZ1JOeXl5Xn2UdUxlnVVWf74qnteTl6vTHBwcJUvapZts7InBVUp+8yeaY8zpzsOSZJo0KAB+fn5nmVzc3M956yqz82pzktVHn30UXbt2sXSpUtZunQpFouFVq1akZKSwjXXXONVS30219e5Xv/l5eXleZarrCa+suVjYmK8ppWVVUFBwWnXFwShfvhcsl2+t4gyzZs3Z86cOSxZsoTWrVsTGxtbac2hJEm8/vrrdRGmUEt0Xfc86q6sprMyo0aNYtCgQSxatIj169ezfv165syZw5w5c5g4cSLff//9GdV2f/vtt/zwww9ERUUxbtw4OnToQGRkpKfG6bHHHuO3336r8ov4TF88O1NlNWwnv+BZmZruveDk3kRqyunOWW2c09oup7pyJk2FgoKCyMnJqVaieL6KiopixowZrFmzhhUrVrBhwwY2b97Mhg0b+Oyzz3j00UcZO3bsWW//XK//8squVaj6iUh5lT29LSwsBKjypksQhPrnc8n2rFmzqpxXWFjIqlWrqpwvkm3ft2TJEvLz8wHo2bNntdeLjIxk+PDhDB8+HIB9+/bxzDPPsHHjRt59913efPPNam9r7ty5gLsXhcp6wDl48GC1t3U6ZbWrmZmZFBYWVqv2LS4ujoMHD3LXXXedVZvX2lBWG3eq0T/L5p1cc+cLQkNDMZlMOBwOjhw5UmmTkMqO71zPS0FBAQUFBZUmWqmpqYC77Xl1RUREkJOTU633IcqrznGUjchatmz5c5aWllZpk4uyYzhTkiTRtWtXT1eddrudmTNn8vLLLzNhwgQGDhxIo0aNzur6qsnrPywsDIvFgs1m44knniA8PLza65YpK6vKmmcJgnB+8Lmqm2+//fas/508CIrgWwoLCz3dX/Xo0YOWLVue9baaN2/OmDFjgIoDHZXVHqmqWum6Zcl+ZY++9+zZw86dO886rpNFRUWRnJyMpmnMmDGjWuuUDaFelhScD1JSUgB3H9SVtS3dvn27p+2sL47yajAY6NSpE1B1hUBZ+ZXvA75Lly7IssyOHTsq/dxkZGSwbNmyCuuV9/PPP1eY5nA4+P3334ET5746WrVqBVDtl/vKlO3j999/r7TJzoIFC8jPzycgIMDTXafRaPS8rPjrr79Wut05c+acURxVMZvN3HTTTSQlJaFpGrt27QLO7vqqyetfURS6d+8OnP31umfPHsD9foogCOcnn0u2U1JSzumf4Ht0XWfJkiXccMMNHDx4kKioKF555ZVqrbty5UpP38Enb3Px4sVAxZEny2reyr7ETlY2YMX333/v9Rg4IyODJ598EpfLVa3Yquv+++8HYMKECZX2LLF3716v5GjMmDEEBwfz9ddfM2XKFK+2xWWOHDlSaZJWWzp37syll16KzWbj+eefp6SkxDMvJyeH559/HnC/JFZVW+nz3e233w7AtGnTWLlypde8mTNnsmjRIoxGI7feeqtnenx8PAMHDkTXdZ5//nnP+wgAVquV559/HrvdTocOHarst/mTTz5h9+7dnt81TeOdd97h+PHjxMXFefWLfjplCX3Zi4vVNWjQIOLj48nIyGD8+PFe18CRI0d44403AHeTrvIv+JWdi6lTp/LPP/94bfObb75h06ZNZxQHwJdffklaWlqF6fv27ePQoUOA9zV/ptdXTV//999/P0ajkbfffptZs2Z5bbPM7t27mT9/fqXrl5VVt27dzmi/giDUHZ9rRiJc2H766SdPzwYOh4Pc3Fy2b9/ueVSakpLC66+/XuULVSfbtWsX48ePJzAwkFatWhEdHY3dbmf79u2kpqYSFBTEQw895LXOgAEDWL16Nf/973/p2bOn5xH9nXfeSbNmzbjnnntYtmwZ06dPZ/Xq1bRq1YqioiLWrl1Lw4YN6d+/PwsWLKixc9K/f38eeeQR3n//fR588EGaNWtGcnKyZ9CNvXv3Mn78eM+LX7GxsXzyySc88MADvPnmm3zxxRe0aNGCqKgoioqK2LdvH4cPH+bSSy+tcmS62vDuu+8yevRo/vzzT/r27Uvnzp1xuVysXr2aoqIiWrdu7Um6fVHv3r259957+fTTT7n99tvp2LEjcXFxHDhwgG3btqEoCi+++CItWrTwWu/5559n//79bNq0if79+9O1a1cURWHt2rXk5OTQoEED3nnnnUr3GR8fT+vWrbn++utJSUkhNDSULVu2cPjwYfz9/XnnnXcq9F5xumMwGo2sWrUKVVUr7VmmMiaTiQ8++IC77rqLadOmsXTpUi699FKKi4tZtWoVdrudnj17ct9993mt179/f0aMGMGPP/7IzTffTKdOnYiOjmb37t3s27eP2267ja+//vqMepr69NNPeeutt2jWrBnNmzfHbDaTkZHBhg0bcLlcXHfddV61wGd6fdX09d+6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7XZGjBjB0qVLiYyMZM6cObRo0cIz/3wtK9GMRKhrosr1DGmaxrhx41i7di3Dhw8/ZaItCIIgCPUhPDycqVOn4ufnx59//snrr79eo9t3uVyMHTuWpUuXEhgYyPTp070SbUEQTvD5ZPunn34iJSWFpUuXVrnMkiVLSElJYebMmee0L03TePrpp/ntt9+45ppreOmll85pe4IgCIJQW9q2bcsHH3wAwIQJE/j6669rZLuapvHQQw/x66+/YjKZmDp1qmg6Igin4PPJ9pw5czCZTKfs+L5nz54YjUZ+++23s96Ppmk89dRTzJo1iyFDhvDGG2+IttiCIAjCee2GG27gscceA+DRRx/lo48+4lxaj5Y93Z02bRqKovDll1/Su3fvmgpXEC5IPp8t7t27l6SkpFMmvoqikJyczN69e89qH2WJ9uzZsxk8eDBvvfVWjbd9EwRBEITa8PTTT3PvvfcC8Pzzz/Pkk0+iquoZb0fTNB599FG++OILJEnio48+OqvxKwThYuPzyXZ+fj6hoaGnXS40NPSsXtQoazoye/ZsBg4cyNtvvy0SbUEQBMFnSJLEq6++yiuvvIIkSXzxxReMGjWKgoKCam/DarUyduxYvv32W2RZ5uOPP2bEiBG1GLUgXDh8vhPMsLAwDh06dNrlDh06REhIyBlv/+OPP2bWrFn4+/vTpEkTPv300wrL9OvXj5YtW57xtgVBEAShLkiSxH333UfDhg255557+OOPP+jevTsTJkygf//+p1x37969jB49mh07dqAoCp999hnXX399HUUuCL7P55PtTp068ccff7B69Wq6du1a6TKrV69m69atXHnllWe8/dTUVMB9Vz9p0qRKl0lISBDJtiAIgnDeu+aaa4iPj+eee+5h//79jBgxgh49evDEE0/Qq1evCsv/8ssv3H///RQVFRETE8MXX3xBjx496iFyQfBdPt/P9ubNm7nxxhvx9/fn3nvvZfjw4QQFBQFQVFTEjz/+yKRJkyguLmbq1Kl06tSpTuMT/Wxf3EQ5+Q5RVr5BlFPNsFqtvPrqq0yePNnTfjslJYVRo0Zx5ZVXYrfb+eijj/j8888B6N69O1988QWxsbHV3sf5Wlain22hrvl8sg3wzTff8MYbb3h+L2sukp+f75n2xBNPcPvtt9d5bCLZvriJcvIdoqx8gyinmpWamsoHH3zAV199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R0czdepUAL744gveffddvvjiC3r06OFZ7t///jdHjx5l9erV9RXqOdu8eTMffvghGzduxOVykZiYyO23387gwYPrO7QL1rhx4045OufQoUN54403PL8XFhYyceJE5s+fT1ZWFlFRUQwcOJD77ruv0h4WNE3ju+++Y/r06Rw6dAh/f3+6d+/OI488QqNGjWrlmC5EpysngPHjx3P99dd7fhdlVfe2bNnC9OnT2bhxI+np6VitVgIDA0lKSuKqq67i3//+t6cZSRlRTueXsmvtxx9/pH379l7zRFkJQuV8Ptl+9NFHWblyJcuXL0dRFHbu3Ml1111HcnIy7777LjExMfzwww+88847XHbZZXz11Vf1HbIgCIIgCIJwkfD5ZiR9+vTh999/Z/HixfTt25fk5GSuuuoq5syZw5AhQzzLGQwGHnnkkXqMVBAEQRAEQbjY+HzNNriHlFUUxfNClNPp5KuvvmLhwoXk5+fTtGlTxowZQ+fOnes5UkEQBEEQBOFickEk24IgCIIgCIJwPvL5rv9mz55daT+dJ/vnn3+YPXt27QckCIIgCIIgCKV8PtkeN24cP/3002mX+7//+z+eeuqpOohIEARBEARBENx8PtmuLk3TkCSpvsMQBEEQBEEQLiIXTbJ95MiRSvv5FARBEARBEITa4pNd/3300Udev+/cubPCtDKqqnLgwAHWrVtH9+7d6yI8QRAEQRAEQQB8tDeS5ORkJElC13XPz9OJiIjg888/p3Xr1nUQoSAIgiAIgiD4aLJdNiyzrus8/fTTdOrUiRtuuKHSZY1GI9HR0bRv3x6TyVSXYQrCBSUpKemMlk9ISGDRokWMGjWKNWvW8Oeff9KgQYNaiq72PPXUU8ydO5c///yTiIgIAEpKSvj7779ZtGgR69evJy0tDUVRaNSoEVdeeSW33347AQEBFbY1ceLEKp/CAdx11108/vjjla5z//3388ADD1S5bp8+fUhNTT3r85yRkUG/fv24/vrrefHFF894fUEQBKFyPtmMZOjQoZ7/z5o1i3/9619e0wRBqHmVXWPr16/n8OHDJCcn07JlS695YWFhdRVardm1axezZ8/m9ttv9yTaAL/99hvPPvssAM2bN6dPnz4UFRWxceNGJk6cyJw5c/juu++81imvY8eONG7cuML0+nzyFh0dzfDhw5k2bRqjR4+madOm9RaL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\n",
      "text/plain": [
       "<Figure size 720x480 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pp_subset = az.extract_dataset(drive_idata, group=\"posterior_predictive\", num_samples=100)\n",
    "obs_data = drive_idata.observed_data\n",
    "\n",
    "_, axes = plt.subplots(3, 1)\n",
    "ax = axes[0]\n",
    "ax.plot(obs_data[\"v\"], \"k-\", zorder=3, label=\"Observed\")\n",
    "ax.set_title(\"Distance from hoop (log scale)\")\n",
    "ax.set_ylabel(\"Distance from hoop\")\n",
    "ax.set_xlabel(\"Time (25Hz)\")\n",
    "\n",
    "ax.plot(pp_subset[\"lambda\"], color=\"#ff668890\")\n",
    "ax.plot([], [], color=\"#ff668890\", label=\"Predicted\")\n",
    "ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=\"medium\");\n",
    "\n",
    "ax = axes[1]\n",
    "ax.plot(obs_data[\"u\"], \"k-\", zorder=3, label=\"Observed\")\n",
    "ax.set_title(\"Smooth speed\")\n",
    "ax.set_ylabel(\"Speed (log scale)\")\n",
    "ax.set_xlabel(\"Time (25Hz)\")\n",
    "\n",
    "ax.plot(pp_subset[\"phi\"], color=\"#ff668890\")\n",
    "ax.plot([], [], color=\"#ff668890\", label=\"Predicted\")\n",
    "ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=\"medium\");\n",
    "\n",
    "ax = axes[2]\n",
    "ax.plot(post[\"z_star\"].mean((\"chain\", \"draw\")), \"k-\")\n",
    "ax.set_title(\"Hidden states\")\n",
    "ax.set_ylabel(\"State\")\n",
    "ax.set_xlabel(\"Time (25Hz)\")\n",
    "ax.set_ylim((.5, 2.5))\n",
    "ax.set_yticks([1, 2], labels=[\"Drive\", \"None\"], size=\"medium\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bb35fe4",
   "metadata": {},
   "source": [
    "## Defensive assignment\n",
    "Link to [this same section](https://mc-stan.org/users/documentation/case-studies/bball-hmm.html#defensive-assignment) in the original Stan case study."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4bf0a5a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset>\n",
      "Dimensions:  (coord: 2, time: 20, player: 5)\n",
      "Coordinates:\n",
      "  * coord    (coord) object 'x' 'y'\n",
      "  * time     (time) int64 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n",
      "  * player   (player) int64 0 1 2 3 4\n",
      "Data variables:\n",
      "    N        int64 ...\n",
      "    K        int64 ...\n",
      "    tau      float64 ...\n",
      "    h        (coord) float64 ...\n",
      "    b        (time, coord) float64 ...\n",
      "    o        (player, time, coord) float64 ...\n",
      "    d        (time, coord) float64 ...\n"
     ]
    }
   ],
   "source": [
    "ds = xr.open_dataset(\"data/defense_example.nc\")\n",
    "print(ds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c217dace",
   "metadata": {},
   "outputs": [],
   "source": [
    "stan_data = {k: v.item() if v.size == 1 else v.values for k, v in ds.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "bc08178c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "// defensive model 0.a (lambda fixed)\n",
      "data {\n",
      "  int<lower=0> N;\n",
      "  int<lower=0> K;\n",
      "  real<lower=0> tau;\n",
      "  real lambda[3];\n",
      "  vector[2] h;\n",
      "  vector[2] b[N];  // array of size N containing vectors of size 2\n",
      "  vector[2] d[N];\n",
      "  vector[2] o[K,N];   // array of size K,N containing vectors of size 2\n",
      "}\n",
      "\n",
      "parameters {\n",
      "  simplex[K] theta[K];\n",
      "}\n",
      "\n",
      "model {\n",
      "  // forward algorithm\n",
      "  {\n",
      "  real acc[K];\n",
      "  real gamma[N, K];\n",
      "  for (k in 1:K)\n",
      "    gamma[1, k] = normal_lpdf(d[1] |  o[k,1]*lambda[1] + h*lambda[2] + b[1]*lambda[3], tau);\n",
      "  for (t in 2:N) {\n",
      "    for (k in 1:K) {\n",
      "      for (j in 1:K)\n",
      "        acc[j] = gamma[t-1, j] + log(theta[j, k])\n",
      "          + normal_lpdf(d[t] |  o[k,t]*lambda[1] + h*lambda[2] + b[t]*lambda[3], tau);\n",
      "      gamma[t, k] = log_sum_exp(acc);\n",
      "    }\n",
      "  }\n",
      "  target += log_sum_exp(gamma[N]);\n",
      "  }\n",
      "}\n",
      "\n",
      "generated quantities {\n",
      "  int<lower=1,upper=K> z_star[N];\n",
      "  real log_p_z_star;\n",
      "  {\n",
      "    int back_ptr[N, K];\n",
      "    real best_logp[N, K];\n",
      "    for (k in 1:K)\n",
      "      best_logp[1, k] = normal_lpdf(d[1] |  o[k,1]*lambda[1] + h*lambda[2] + b[1]*lambda[3], tau);\n",
      "    for (t in 2:N) {\n",
      "      for (k in 1:K) {\n",
      "        best_logp[t, k] = negative_infinity();\n",
      "        for (j in 1:K) {\n",
      "          real logp;\n",
      "          logp = best_logp[t-1, j] + log(theta[j, k])\n",
      "            + normal_lpdf(d[t] |  o[k,t]*lambda[1] + h*lambda[2] + b[t]*lambda[3], tau);\n",
      "          if (logp > best_logp[t, k]) {\n",
      "            back_ptr[t, k] = j;\n",
      "            best_logp[t, k] = logp;\n",
      "          }\n",
      "        }\n",
      "      }\n",
      "    }\n",
      "    log_p_z_star = max(best_logp[N]);\n",
      "    for (k in 1:K)\n",
      "      if (best_logp[N, k] == log_p_z_star)\n",
      "        z_star[N] = k;\n",
      "    for (t in 1:(N - 1))\n",
      "      z_star[N - t] = back_ptr[N - t + 1, z_star[N - t + 1]];\n",
      "  }\n",
      "}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#collapse-output\n",
    "with open(\"stan_codes/defense_0a.stan\", \"r\") as f:\n",
    "    print(f.read())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e9451c79",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:cmdstanpy:found newer exe file, not recompiling\n",
      "INFO:cmdstanpy:CmdStan start processing\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c9b20520895345ada4b40bb5ebe426ea",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "chain 1 |          | 00:00 Status"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2dc40b08350a4baeb2c845546e032657",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "chain 2 |          | 00:00 Status"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7ccd6c14456d446985d4f25159eb1294",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "chain 3 |          | 00:00 Status"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6ad2b6fbc8614fed97169cb0459a15f4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "chain 4 |          | 00:00 Status"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                                                                                                                                                                                                                                                "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:cmdstanpy:CmdStan done processing.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "model = cmdstanpy.CmdStanModel(stan_file=\"stan_codes/defense_0a.stan\")\n",
    "defense0a_fit = model.sample(data = {**stan_data, \"lambda\": [1/3, 1/3, 1/3]})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60ce9a14",
   "metadata": {},
   "source": [
    "In this example we already have the data as an xarray object, so we won't use the `observed_data` group. If you still wanted to include it, it might be easier to use `.add_groups` with the already existing `Dataset` like we did with the posterior predictive samples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "923ea72e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>&lt;xarray.Dataset&gt;\n",
       "Dimensions:       (chain: 4, draw: 1000, origin_state: 5, end_state: 5, time: 20)\n",
       "Coordinates:\n",
       "  * chain         (chain) int64 0 1 2 3\n",
       "  * draw          (draw) int64 0 1 2 3 4 5 6 7 ... 993 994 995 996 997 998 999\n",
       "  * origin_state  (origin_state) int64 1 2 3 4 5\n",
       "  * end_state     (end_state) int64 1 2 3 4 5\n",
       "  * time          (time) int64 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n",
       "Data variables:\n",
       "    theta         (chain, draw, origin_state, end_state) float64 0.5028 ... 0...\n",
       "    z_star        (chain, draw, time) float64 5.0 5.0 5.0 5.0 ... 2.0 2.0 2.0\n",
       "    log_p_z_star  (chain, draw) float64 -3.639e+04 -3.64e+04 ... -3.64e+04\n",
       "Attributes:\n",
       "    created_at:                 2022-04-24T22:36:39.407969\n",
       "    arviz_version:              0.12.0\n",
       "    inference_library:          cmdstanpy\n",
       "    inference_library_version:  1.0.1</pre>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:       (chain: 4, draw: 1000, origin_state: 5, end_state: 5, time: 20)\n",
       "Coordinates:\n",
       "  * chain         (chain) int64 0 1 2 3\n",
       "  * draw          (draw) int64 0 1 2 3 4 5 6 7 ... 993 994 995 996 997 998 999\n",
       "  * origin_state  (origin_state) int64 1 2 3 4 5\n",
       "  * end_state     (end_state) int64 1 2 3 4 5\n",
       "  * time          (time) int64 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n",
       "Data variables:\n",
       "    theta         (chain, draw, origin_state, end_state) float64 0.5028 ... 0...\n",
       "    z_star        (chain, draw, time) float64 5.0 5.0 5.0 5.0 ... 2.0 2.0 2.0\n",
       "    log_p_z_star  (chain, draw) float64 -3.639e+04 -3.64e+04 ... -3.64e+04\n",
       "Attributes:\n",
       "    created_at:                 2022-04-24T22:36:39.407969\n",
       "    arviz_version:              0.12.0\n",
       "    inference_library:          cmdstanpy\n",
       "    inference_library_version:  1.0.1"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states = [1, 2, 3, 4, 5]\n",
    "defense0a_idata = az.from_cmdstanpy(\n",
    "    defense0a_fit,\n",
    "    dims={\n",
    "        \"theta\": [\"origin_state\", \"end_state\"], \n",
    "        \"z_star\": [\"time\"],\n",
    "    },\n",
    "    coords={\"state\": states, \"origin_state\": states, \"end_state\": states}\n",
    ")\n",
    "defense0a_idata.posterior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "0daa4426",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "// defensive model 0.b (lambda as parameter)\n",
      "data {\n",
      "  int<lower=0> N;\n",
      "  int<lower=0> K;\n",
      "  real<lower=0> tau;\n",
      "  vector[3] alpha;\n",
      "  vector[2] h;\n",
      "  vector[2] b[N];  // array of size N containing vectors of size 2\n",
      "  vector[2] d[N];\n",
      "  vector[2] o[K,N];   // array of size K,N containing vectors of size 2\n",
      "}\n",
      "\n",
      "parameters {\n",
      "  simplex[K] theta[K];\n",
      "  simplex[3] lambda;\n",
      "}\n",
      "\n",
      "model {\n",
      "  // priors\n",
      "  target+= dirichlet_lpdf(lambda | alpha);\n",
      "  // forward algorithm\n",
      "  {\n",
      "  real acc[K];\n",
      "  real gamma[N, K];\n",
      "  for (k in 1:K)\n",
      "    gamma[1, k] = normal_lpdf(d[1] |  o[k,1]*lambda[1] + h*lambda[2] + b[1]*lambda[3], tau);\n",
      "  for (t in 2:N) {\n",
      "    for (k in 1:K) {\n",
      "      for (j in 1:K)\n",
      "        acc[j] = gamma[t-1, j] + log(theta[j, k])\n",
      "          + normal_lpdf(d[t] |  o[k,t]*lambda[1] + h*lambda[2] + b[t]*lambda[3], tau);\n",
      "      gamma[t, k] = log_sum_exp(acc);\n",
      "    }\n",
      "  }\n",
      "  target += log_sum_exp(gamma[N]);\n",
      "  }\n",
      "}\n",
      "\n",
      "generated quantities {\n",
      "  int<lower=1,upper=K> z_star[N];\n",
      "  real log_p_z_star;\n",
      "  {\n",
      "    int back_ptr[N, K];\n",
      "    real best_logp[N, K];\n",
      "    for (k in 1:K)\n",
      "      best_logp[1, k] = normal_lpdf(d[1] |  o[k,1]*lambda[1] + h*lambda[2] + b[1]*lambda[3], tau);\n",
      "    for (t in 2:N) {\n",
      "      for (k in 1:K) {\n",
      "        best_logp[t, k] = negative_infinity();\n",
      "        for (j in 1:K) {\n",
      "          real logp;\n",
      "          logp = best_logp[t-1, j] + log(theta[j, k])\n",
      "            + normal_lpdf(d[t] |  o[k,t]*lambda[1] + h*lambda[2] + b[t]*lambda[3], tau);\n",
      "          if (logp > best_logp[t, k]) {\n",
      "            back_ptr[t, k] = j;\n",
      "            best_logp[t, k] = logp;\n",
      "          }\n",
      "        }\n",
      "      }\n",
      "    }\n",
      "    log_p_z_star = max(best_logp[N]);\n",
      "    for (k in 1:K)\n",
      "      if (best_logp[N, k] == log_p_z_star)\n",
      "        z_star[N] = k;\n",
      "    for (t in 1:(N - 1))\n",
      "      z_star[N - t] = back_ptr[N - t + 1, z_star[N - t + 1]];\n",
      "  }\n",
      "}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#collapse-output\n",
    "with open(\"stan_codes/defense_0b.stan\", \"r\") as f:\n",
    "    print(f.read())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ed1a8dfb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:cmdstanpy:found newer exe file, not recompiling\n",
      "INFO:cmdstanpy:CmdStan start processing\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "55ad0024e1d14bb18b5ee74445eefb27",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "chain 1 |          | 00:00 Status"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fb86145cff0f4c8bbb1b202b92fb7b89",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "chain 2 |          | 00:00 Status"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f426ef76162841ddb32ca19010e7997e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "chain 3 |          | 00:00 Status"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dd116640fe89476eb39903a7bb8332be",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "chain 4 |          | 00:00 Status"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                                                                                                                                                                                                                                                "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:cmdstanpy:CmdStan done processing.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "model = cmdstanpy.CmdStanModel(stan_file=\"stan_codes/defense_0b.stan\")\n",
    "defense0b_fit = model.sample(data = {**stan_data, \"alpha\": [3., 3., 3.]})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac218c13",
   "metadata": {},
   "source": [
    "Here I have chosen `param` as dimension name for `lambda` because each component multiplies a different provided variable, and used `o, h, b` as coordinate names to match the variable names in the data block, but they could be `offensive player, hoop, ball` as well, there is no need to restrict oneself to one character coordinate values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b3874c2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>&lt;xarray.Dataset&gt;\n",
       "Dimensions:       (chain: 4, draw: 1000, origin_state: 5, end_state: 5,\n",
       "                   param: 3, time: 20)\n",
       "Coordinates:\n",
       "  * chain         (chain) int64 0 1 2 3\n",
       "  * draw          (draw) int64 0 1 2 3 4 5 6 7 ... 993 994 995 996 997 998 999\n",
       "  * origin_state  (origin_state) int64 1 2 3 4 5\n",
       "  * end_state     (end_state) int64 1 2 3 4 5\n",
       "  * param         (param) &lt;U1 &#x27;o&#x27; &#x27;h&#x27; &#x27;b&#x27;\n",
       "  * time          (time) int64 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n",
       "Data variables:\n",
       "    theta         (chain, draw, origin_state, end_state) float64 0.5198 ... 0...\n",
       "    lambda        (chain, draw, param) float64 0.5897 0.4103 ... 0.0001586\n",
       "    z_star        (chain, draw, time) float64 5.0 1.0 1.0 1.0 ... 2.0 2.0 2.0\n",
       "    log_p_z_star  (chain, draw) float64 -1.251e+04 -1.251e+04 ... -1.251e+04\n",
       "Attributes:\n",
       "    created_at:                 2022-04-24T22:37:09.720963\n",
       "    arviz_version:              0.12.0\n",
       "    inference_library:          cmdstanpy\n",
       "    inference_library_version:  1.0.1</pre>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:       (chain: 4, draw: 1000, origin_state: 5, end_state: 5,\n",
       "                   param: 3, time: 20)\n",
       "Coordinates:\n",
       "  * chain         (chain) int64 0 1 2 3\n",
       "  * draw          (draw) int64 0 1 2 3 4 5 6 7 ... 993 994 995 996 997 998 999\n",
       "  * origin_state  (origin_state) int64 1 2 3 4 5\n",
       "  * end_state     (end_state) int64 1 2 3 4 5\n",
       "  * param         (param) <U1 'o' 'h' 'b'\n",
       "  * time          (time) int64 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n",
       "Data variables:\n",
       "    theta         (chain, draw, origin_state, end_state) float64 0.5198 ... 0...\n",
       "    lambda        (chain, draw, param) float64 0.5897 0.4103 ... 0.0001586\n",
       "    z_star        (chain, draw, time) float64 5.0 1.0 1.0 1.0 ... 2.0 2.0 2.0\n",
       "    log_p_z_star  (chain, draw) float64 -1.251e+04 -1.251e+04 ... -1.251e+04\n",
       "Attributes:\n",
       "    created_at:                 2022-04-24T22:37:09.720963\n",
       "    arviz_version:              0.12.0\n",
       "    inference_library:          cmdstanpy\n",
       "    inference_library_version:  1.0.1"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states = [1, 2, 3, 4, 5]\n",
    "defense0b_idata = az.from_cmdstanpy(\n",
    "    defense0b_fit,\n",
    "    dims={\n",
    "        \"theta\": [\"origin_state\", \"end_state\"],\n",
    "        \"lambda\": [\"param\"],\n",
    "        \"z_star\": [\"time\"],\n",
    "    },\n",
    "    coords={\"state\": states, \"origin_state\": states, \"end_state\": states, \"param\": [\"o\", \"h\", \"b\"]}\n",
    ")\n",
    "defense0b_idata.posterior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "1dd46506",
   "metadata": {},
   "outputs": [],
   "source": [
    "lambda0b = defense0b_idata.posterior[\"lambda\"]\n",
    "\n",
    "mu0a = ds[\"o\"] / 3 + ds[\"h\"] / 3 + ds[\"b\"] / 3\n",
    "mu0b = (\n",
    "    ds[\"o\"] * lambda0b.sel(param=\"o\") \n",
    "    + ds[\"h\"] * lambda0b.sel(param=\"h\") \n",
    "    + ds[\"b\"] * lambda0b.sel(param=\"b\")\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97b87919",
   "metadata": {},
   "source": [
    "Note that `mu0b` is now a 5d array. Thanks to xarray automatic alignment and broadcasting capabilities we have calculated its values for all players, all time steps and all samples at once:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "3b627321",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>&lt;xarray.Dataset&gt;\n",
       "Dimensions:  (coord: 2, time: 20, player: 5, chain: 4, draw: 1000)\n",
       "Coordinates:\n",
       "  * coord    (coord) object &#x27;x&#x27; &#x27;y&#x27;\n",
       "  * time     (time) int64 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n",
       "  * player   (player) int64 0 1 2 3 4\n",
       "  * chain    (chain) int64 0 1 2 3\n",
       "  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 992 993 994 995 996 997 998 999\n",
       "    param    &lt;U1 &#x27;b&#x27;\n",
       "Data variables:\n",
       "    mu0b     (player, time, coord, chain, draw) float64 -0.5923 ... -0.8203</pre>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:  (coord: 2, time: 20, player: 5, chain: 4, draw: 1000)\n",
       "Coordinates:\n",
       "  * coord    (coord) object 'x' 'y'\n",
       "  * time     (time) int64 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n",
       "  * player   (player) int64 0 1 2 3 4\n",
       "  * chain    (chain) int64 0 1 2 3\n",
       "  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 992 993 994 995 996 997 998 999\n",
       "    param    <U1 'b'\n",
       "Data variables:\n",
       "    mu0b     (player, time, coord, chain, draw) float64 -0.5923 ... -0.8203"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# conversion to dataset is only for display reasons\n",
    "mu0b.to_dataset(name=\"mu0b\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c756990e",
   "metadata": {},
   "source": [
    "This doesn't make any difference in this case, because we are multiplying the components of `lambda` by quantities that are not random variables, so we will get the same result averaging on `lambda` before operating or averaging on `mu` after operating. \n",
    "\n",
    "However, in many cases we need to operate with all the draws of each random variable. xarray makes it straightforward to work with all the samples and average only once we have the quantity of interest."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15eeeae0",
   "metadata": {},
   "source": [
    "## Further reading\n",
    "* [Working with InferenceData](https://python.arviz.org/en/latest/getting_started/WorkingWithInferenceData.html) page in the ArviZ docs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31caf7af",
   "metadata": {},
   "source": [
    "Package versions used to generate this post:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "cab9f42b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Last updated: Mon Apr 25 2022\n",
      "\n",
      "Python implementation: CPython\n",
      "Python version       : 3.9.10\n",
      "IPython version      : 8.0.1\n",
      "\n",
      "xarray_einstats: 0.3.0.dev0\n",
      "\n",
      "xarray    : 2022.3.0\n",
      "matplotlib: 3.5.1\n",
      "arviz     : 0.12.0\n",
      "pandas    : 1.4.2\n",
      "cmdstanpy : 1.0.1\n",
      "numpy     : 1.21.5\n",
      "\n",
      "Watermark: 2.3.0\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#hide_input\n",
    "%load_ext watermark\n",
    "%watermark -n -u -v -iv -w -p xarray_einstats"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00d12530",
   "metadata": {},
   "source": [
    "---\n",
    "Comments are not enabled for this post, to inquiry further about the contents of the post, ask on [Stan Discourse](https://discourse.mc-stan.org/). Feel free to tag me at [@OriolAbril](https://discourse.mc-stan.org/u/oriolabril/summary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83005067",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
