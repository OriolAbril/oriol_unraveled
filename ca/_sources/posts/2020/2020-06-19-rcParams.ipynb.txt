{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# \"ArviZ customization with rcParams\"\n",
    "> \"Use ArviZ rcParams to get sensible defaults right out of the box\"\n",
    "\n",
    "- toc: true\n",
    "- author: Oriol Abril\n",
    "- badges: true\n",
    "- categories: [python, arviz]\n",
    "- tags: [customization, rcparams]\n",
    "- image: images/nb/rc_context.png"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# About\n",
    "ArviZ not only builds on top of matplotlib's `rcParams` but also adds its own rcParams instance to handle specific settings. This post will only graze matplotlib's rcParams, which are already detailed in [matplotlib's docs](https://matplotlib.org/1.4.1/users/customizing.html); it will dive into specific ArviZ rcParams."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "Paraphrasing the description on rcParams in the documentation of matplotlib:\n",
    "\n",
    "> ArviZ uses arvizrc configuration files to customize all kinds of properties, which we call rcParams. You can control the defaults of many properties in ArviZ: data loading mode (lazy or eager), automatically showing generated plots, the default information criteria and so on.\n",
    "\n",
    "There are several ways of modifying `arviz.rcParams` instance, each of them targeted to specific needs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import arviz as az\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "idata = az.load_arviz_data(\"centered_eight\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Customizing ArviZ"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## arvizrc file\n",
    "To define default values on a per user or per project basis, `arvizrc` file should be used. When imported, ArviZ search for an `arvizrc` file in several locations sorted below by priority:\n",
    "- `$PWD/arvizrc`\n",
    "- `$ARVIZ_DATA/arvizrc`\n",
    "- On Linux,\n",
    "  - `$XDG_CONFIG_HOME/arviz/arvizrc` (if `$XDG_CONFIG_HOME`\n",
    "  is defined)\n",
    "  - or `$HOME/.config/arviz/arvizrc` (if `$XDG_CONFIG_HOME`\n",
    "  is not defined)\n",
    "- On other platforms,\n",
    "  - `$HOME/.arviz/arvizrc` if `$HOME` is defined\n",
    "    \n",
    "Once one of these files is found, ArviZ stops looking and loads its configuration. If none of them are present, the values hardcoded in ArviZ codebase are used. The file used to set the default values in ArviZ can be obtained with the following command:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "import arviz as az\n",
    "print(az.rcparams.get_arviz_rcfile())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ArviZ has loaded a file used to set defaults on a per user basis. Unless I use a different rc file in the current directory or modify `rcParams` as explained above, this configuration will be automatically used every time ArviZ is imported. \n",
    "\n",
    "This can be really useful to define the favourite backend or information criterion, written once in the rc file and ArviZ automatically uses the desired values."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Important: You should not rely on ArviZ defaults being always the same."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ArviZ strives to encourage best practices and therefore will change the default values whenever a new algorithm is developed to achieve this goal. If you rely on a specific value, you should either use an `arvizrc` template or set the defaults at the beggining of every script/notebook."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dynamic rc settings\n",
    "To set default values on a per file or per project basis, `rcParams` can also be modified dynamically, either overwritting a specific key:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "az.rcParams[\"data.load\"] = \"eager\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that `rcParams` is the instance to be modified, exactly like in matplotlib. Careful with capitalization!\n",
    "\n",
    "Another option is to define a dictionary with several new defaults and update rcParams all at once. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "rc = {\n",
    "    \"data.load\": \"lazy\",\n",
    "    \"plot.max_subplots\": 30,\n",
    "    \"stats.ic_scale\": \"negative_log\",\n",
    "    \"plot.matplotlib.constrained_layout\": False\n",
    "}\n",
    "az.rcParams.update(rc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## rc_context\n",
    "And last but not least, to temporarily use a different set of defaults, ArviZ also has a [`rc_context`](https://arviz-devs.github.io/arviz/generated/arviz.rc_context.html#arviz.rc_context) function. Its main difference and advantage is that it is a context manager, therefore, all code executed inside the context will use the defaults defined by `rc_context` but once we exit the context, everything goes back to normal. Let's generate 3 posterior plots with the same command to show this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "_, axes = plt.subplots(1,3, figsize=(15,4))\n",
    "\n",
    "az.plot_posterior(idata, var_names=\"mu\", ax=axes[0])\n",
    "\n",
    "with az.rc_context({\"plot.point_estimate\": \"mode\", \"stats.hdi_prob\": 0.7}):\n",
    "    az.plot_posterior(idata, var_names=\"mu\", ax=axes[1])\n",
    "\n",
    "az.plot_posterior(idata, var_names=\"mu\", ax=axes[2]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ArviZ default settings\n",
    "This section will describe ArviZ rcParams as version 0.8.3 (see [GitHub](https://github.com/arviz-devs/arviz/blob/master/arvizrc.template) for an up to date version)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data\n",
    "The rcParams in this section are related to the [data](https://arviz-devs.github.io/arviz/api.html#data) module in ArviZ, that is, they are either related to `from_xyz` converter functions or to `InferenceData` class."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**data.http_protocol** : *{https, http}*\n",
    "\n",
    "Only the first two example datasets `centered_eight` and `non_centered_eight` come as part of ArviZ. All the others are downloaded from figshare the first time and stored locally to help reloading them the next time. We can get the names of the data available by not passing any argument to `az.load_arviz_data` (you can also get the description of each of them with `az.list_datasets`):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['centered_eight', 'non_centered_eight', 'radon', 'rugby', 'regression1d', 'regression10d', 'classification1d', 'classification10d'])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "az.load_arviz_data().keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thus, the first time you call `az.load_arviz_data(\"radon\")`, ArviZ downloads the dataset using `data.http_protocol`. The default is set to `https` but if needed, it can be modified to `http`. Notice how there is no fallback, if downloading with `https` fails, there is no second try with `http`, an error is risen. To use `http` you have to set the rcParam explicitly.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**data.index_origin** : *{0, 1}*\n",
    "\n",
    "ArviZ integration with Stan and Julia who use 1 based indexing motivate this rcParam. This rcParam is still at an early stage and its implementation is bound to vary, therefore it has no detailed description."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**data.load** : *{lazy, eager}*\n",
    "\n",
    "Even when not using Dask, xarray's default is to load data lazily into memory when reading from disk. ArviZ's `from_netcdf` also uses the same default. That is, ArviZ functions that read data from disk `from_netcdf` and `load_arviz_data` do not load the data into memory unless `data.load` rcParam is set to `eager`. \n",
    "\n",
    "Most use cases not only do not require loading data into memory but will also benefit from lazy loading. However, there is one clear exception: when too many files are lazily opened at the same time, xarray ends up crashing with extremely cryptic error messages, these cases require setting data loading to eager mode. One example of such situation is generating ArviZ documentation, we therefore set `data.load` to `eager` in sphinx configuration file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**data.metagroups** : *mapping of {str : list of str}*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Warning: Do not overwrite `data.metagroups` as things may break, to add custom metagroups add new keys to the dictionary as shown below"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One of the current projects in ArviZ is to extend the capabilities of `InferenceData`. One of the limitations was not allowing its functions and methods to be applied to several groups at the same time. Starting with ArviZ 0.8.0, [`InferenceData` methods](https://arviz-devs.github.io/arviz/generated/arviz.InferenceData.html#arviz.InferenceData) take arguments `groups` and `filter_groups` to overcome this limitation. These two combined arguments have the same capabilities as `var_names`+`filter_vars` in plotting functions: exact matching, like and regex matching like pandas and support for ArviZ `~` negation prefix and one extra feature: metagroups. So what are metagroups? Let's see"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "posterior_groups:\n",
      "    ('posterior', 'posterior_predictive', 'sample_stats', 'log_likelihood')\n",
      "\n",
      "prior_groups:\n",
      "    ('prior', 'prior_predictive', 'sample_stats_prior')\n",
      "\n",
      "posterior_groups_warmup:\n",
      "    ('_warmup_posterior', '_warmup_posterior_predictive', '_warmup_sample_stats')\n",
      "\n",
      "latent_vars:\n",
      "    ('posterior', 'prior')\n",
      "\n",
      "observed_vars:\n",
      "    ('posterior_predictive', 'observed_data', 'prior_predictive')\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#collapse\n",
    "for metagroup, groups in az.rcParams[\"data.metagroups\"].items():\n",
    "    print(f\"{metagroup}:\\n    {groups}\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Imagine the data you passed to the model was rescaled, after converting to `InferenceData` you have to rescale the data again to its original values, but not only the observations, posterior and prior predictive values too! \n",
    "\n",
    "Having to apply the rescaling manually to each of the three groups is tedious at best, and creating a variable called `observed_vars` storing a list with these 3 groups is problematic -- when doing prior checks there is no `posterior_predictive` group, it's a highway towards errors at every turn. Metagroups are similar to the variable approach but it's already there and it applies the function only to present groups. Let's add a new metagroup and use it to shift our data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "az.rcParams[\"data.metagroups\"][\"sampled\"] = (\n",
    "    'posterior', 'posterior_predictive', 'sample_stats', 'log_likelihood', 'prior', 'prior_predictive'\n",
    ")\n",
    "shifted_idata = idata.map(lambda x: x-7, groups=\"sampled\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**data.save_warmup** : *bool*\n",
    "\n",
    "If `True`, converter functions will store warmup iterations in the corresponding groups by default.\n",
    "\n",
    "> Note: `data.save_warmup` does not affect `from_netcdf`, all groups are always loaded from file"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### General"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**plot.backend** : *{matplotlib, bokeh}*\n",
    "\n",
    "Default plotting backend."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**plot.max_subplots** : int\n",
    "\n",
    "Maximum number of subplots in a single figure. Adding too many subplots into a figure can be really slow, to the point that it looks like everthing has crashed without any error message. When there are more variables to plot than `max_subplots` allowed, ArviZ sends a warning and plots at most `max_suplots`. See for yourselves:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/oriol/venvs/arviz-dev/lib/python3.6/site-packages/arviz/plots/plot_utils.py:563: UserWarning: rcParams['plot.max_subplots'] (3) is smaller than the number of variables to plot (10) in plot_posterior, generating only 3 plots\n",
      "  UserWarning,\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1490.4x331.2 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "with az.rc_context({\"plot.max_subplots\": 3}):\n",
    "    az.plot_posterior(idata);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**plot.point_estimate** : *{mean, median, model, None}*\n",
    "\n",
    "Default point estimate to include in plots like `plot_posterior` or `plot_density`. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bokeh"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**plot.bokeh.bounds_x_range**, **plot.bokeh.bounds_y_range** : *auto, None or tuple of (float, float), default auto*\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**plot.bokeh.figure.dpi** : *int, default 60*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**plot.bokeh.figure.height**, **plot.bokeh.figure.width** : *int, default 500*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**plot.bokeh.layout.order** : *str, default default*\n",
    "\n",
    "Select subplot structure for bokeh. One of `default`, `column`, `row`, `square`, `square_trimmed` or `Ncolumn` (`Nrow`) where N is an integer number of columns (rows), here is one example to generate a subplot grid with 2 columns and the necessary rows to fit all variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "with az.rc_context({\"plot.bokeh.layout.order\": \"2column\"}):\n",
    "    az.plot_ess(idata, backend=\"bokeh\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**plot.bokeh.layout.sizing_mode** : *{fixed, stretch_width, stretch_height, stretch_both, scale_width, scale_height, scale_both}*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**plot.bokeh.layout.toolbar_location** : *{above, below, left, right, None}*\n",
    "\n",
    "Location for toolbar on bokeh layouts. `None` will hide the toolbar."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**plot.bokeh.marker** : *str, default Cross*\n",
    "\n",
    "Default marker for bokeh plots. See [bokeh reference on markers](https://docs.bokeh.org/en/latest/docs/reference/models/markers.html) for more details."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**plot.bokeh.output_backend** : *{webgl, canvas, svg}*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**plot.bokeh.show** : *bool, default True*\n",
    "\n",
    "Show bokeh plot before returning in ArviZ function."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**plot.bokeh.tools** : *str, default reset,pan,box_zoom,wheel_zoom,lasso_select,undo,save,hove*\n",
    "\n",
    "Default tools in bokeh plots. More details on [Configuring Plot Tools docs](https://docs.bokeh.org/en/latest/docs/user_guide/tools.html)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Matplotlib\n",
    "Matplotlib already has its own [`rcParams`](https://matplotlib.org/3.2.1/tutorials/introductory/customizing.html#a-sample-matplotlibrc-file), which are actually the inspiration for ArviZ rcParams. Therefore, this section is minimalistic."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**plot.matplotlib.show** : *bool, default False*\n",
    "\n",
    "Call `plt.show` from within ArviZ plotting functions. This generally makes no difference in jupyter like environments, but it can be useful for instance in the IPython terminal when we don't want to customize the plots genereted by ArviZ by changing titles or labels."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**stats.hdi_prob** : *float*\n",
    "\n",
    "Default probability of the calculated HDI intervals.\n",
    "\n",
    "> Important: This probability is completely arbitrary. ArviZ using 0.94 instead of the more common 0.95 aims to emphasize this arbitrary choice."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**stats.information_criterion** : *{loo, waic}*\n",
    "\n",
    "Default information criterion used by `compare` and `plot_elpd`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**stats.ic_pointwise** : *bool, default False*\n",
    "\n",
    "Return pointwise values when calling `loo` or `waic`. Pointwise values are an intermediate result and therefore setting `ic_pointwise` to true does not require extra computation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**stats.ic_scale** : *{log, deviance, negative_log}*\n",
    "\n",
    "Default information criterion scale. See docs on [`loo`](https://arviz-devs.github.io/arviz/generated/arviz.loo.html#arviz.loo) or [`waic`](https://arviz-devs.github.io/arviz/generated/arviz.waic.html#arviz.waic) for more detail."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Tip: Is there any extra rcParam you'd like to see in ArviZ? Check out [arviz-devs/arviz#792](https://github.com/arviz-devs/arviz/issues/792), it's more than possible you'll be able to add it yourself!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Package versions used to generate this post:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "arviz 0.9.0\n",
      "last updated: Mon Jun 29 2020 \n",
      "\n",
      "CPython 3.6.9\n",
      "IPython 7.15.0\n",
      "watermark 2.0.2\n"
     ]
    }
   ],
   "source": [
    "#hide_input\n",
    "%load_ext watermark\n",
    "%watermark -n -u -v -iv -w"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "Comments are not enabled for the blog, to inquiry further about the contents of the post, ask on [ArviZ Issues](https://github.com/arviz-devs/arviz/issues)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
